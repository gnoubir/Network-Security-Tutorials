(* Simple Challenge Reponse Protocol *)

(* Shared key encryption *)

set traceDisplay = long.

type skey.  (* symmetric key *)

fun bitstring_to_skey(bitstring): skey [typeConverter].

fun sencrypt(bitstring, skey): bitstring.
reduc forall m: bitstring, k: skey; sdecrypt(sencrypt(m, k), k) = m.

const HELLO, CLIENT, SERVER: bitstring.

free c: channel.
free kAB: skey [private].
free M: bitstring [private].

event serverAuthenticated(bitstring).
event clientAuthenticated(bitstring).
event ServerProved(bitstring).
event clientProved(bitstring).

query NA: bitstring; 
    event(serverAuthenticated(NA)) ==> event(ServerProved(NA)).

query NB: bitstring; 
    event(clientAuthenticated(NB)) ==> event(clientProved(NB)).

query attacker(M).

let clientA(kAB: skey) =
    new NA: bitstring;
    out(c, HELLO);
    in(c, NB: bitstring);
    let A_RESP = sencrypt((CLIENT, NB), kAB) in (
        event clientProved(NB);
        out(c, (A_RESP, NA));
        in(c, RESP: bitstring);
        let B_RESP = sdecrypt(RESP, kAB) in (
            if B_RESP = (SERVER, NA) then (
                event serverAuthenticated(NA);
                let k = bitstring_to_skey(sencrypt((NA, NB), kAB)) in
                    out(c, sencrypt(M, k))
            )
        )
    ).

let serverB(kAB: skey) = 
    in(c, hello: bitstring);
    new NB: bitstring;
    out(c, NB);
    in(c, (RESP: bitstring, NA: bitstring));
    let A_RESP = sdecrypt(RESP, kAB) in (
        if A_RESP = (CLIENT, NB) then (
            event clientAuthenticated(NB);
            let B_RESP: bitstring = sencrypt((SERVER, NA), kAB) in (
                event ServerProved(NA);
                out(c, B_RESP)
            )
        )
    ).

process
    ( (! clientA(kAB) ) | 
      (! serverB(kAB) ) |
      phase 1; out(c, kAB)  )